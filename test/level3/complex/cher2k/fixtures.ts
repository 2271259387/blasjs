/* This is a conversion from BLAS to Typescript/Javascript
Copyright (C) 2018  Jacob K.F. Bogers  info@mail.jacob-bogers.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import { complex } from '../../../test-helpers';

import { matrix_mxn } from '../../../matrices';

export const fixture = {
    // C := alpha*op( A )*op( B ) + beta*C,
    // SUBROUTINE ZHER2K(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC)
    cher2k: {
        case0: {
            desc: 'uplo="l", trans="n", n=5, k=6, alpha=(0.2,0.8), beta=(0.3)',
            input: {
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'u',
                trans: 'n',
                n: 5, // A = m*m marrix , lda >= m
                k: 6, // columns
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                beta: 0.3,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(3.6058251087158846, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.68811782065567806, -0.10513209829930731),
                    complex(1.3043790631628438, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(0.94510615058316949, 4.4049789862753264e-2),
                    complex(0.4524730057745262, 0.24615098347899378),
                    complex(2.9377338070895544, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.11876585523864702, -0.21516651831640768),
                    complex(-0.5284164852171781, -1.2143434542327047),
                    complex(0.75802713251390341, 8.5800406111208816e-2),
                    complex(4.1193519035669652, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(1.4913513120355024, -0.36110486844967427),
                    complex(-0.72451401403152893, -0.83104674841077619),
                    complex(1.4374079607512258, -0.3064531942321978),
                    complex(1.1771392414997601, 0.7514607675427234),
                    complex(7.6629930339836436, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case1: {
            desc: 'uplo="l", trans="n", n=5, k=4, alpha=(0.2,0.8), beta=0, a(1,1)=0',
            input: {
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'u',
                trans: 'n',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(1.3078002746096349, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.10361333547409496, 0.24149736125040472),
                    complex(1.1198417497625819, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(0.77267953344847207, -2.8878492069004986),
                    complex(0.18597724644402142, 0.13914165833399261),
                    complex(2.1022252342348491, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.99111221896503643, -1.860233521169216),
                    complex(-0.16907159032896391, -1.2348811617422517),
                    complex(0.96275725625355313, -0.3567357152820011),
                    complex(3.6393697204873954, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-0.22504670092250856, -1.3057917981450853),
                    complex(-0.46540957116130088, -1.1081177222021112),
                    complex(1.4870086981201611, -0.93708248306429187),
                    complex(1.1799295830137679, 0.92797911610027761),
                    complex(6.9112116413057718, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case2: {
            desc: 'uplo="l", trans="n", n=5, k=4, alpha=(0.2,0.8), beta=0, b(1,1)=0',
            input: {
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'u',
                trans: 'n',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(1.3078002746096349, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.24643398659643961, -1.099564542548209),
                    complex(1.1198417497625819, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(1.1639551912088129, 1.7650659902905894),
                    complex(0.18597724644402142, 0.13914165833399261),
                    complex(2.1022252342348491, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-1.5932967169415519, 0.26754845325677068),
                    complex(-0.16907159032896391, -1.2348811617422517),
                    complex(0.96275725625355313, -0.3567357152820011),
                    complex(3.6393697204873954, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(2.6689699106340283, 2.3226802065569081),
                    complex(-0.46540957116130088, -1.1081177222021112),
                    complex(1.4870086981201611, -0.93708248306429187),
                    complex(1.1799295830137679, 0.92797911610027761),
                    complex(6.9112116413057718, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case3: {
            desc: 'uplo="l", trans="n", n=5, k=4, alpha=(0.2,0.8), beta=0, a(1,1)=0 v b(1,1)=0',
            input: {
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'u',
                trans: 'n',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(1.3078002746096349, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(9.6222412413654423e-2, -0.47278950590771907),
                    complex(1.1198417497625819, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(0.38670296267975646, -0.51248215108491224),
                    complex(0.18597724644402142, 0.13914165833399261),
                    complex(2.1022252342348491, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-0.56706499579150604, -1.1193936509445461),
                    complex(-0.16907159032896391, -1.2348811617422517),
                    complex(0.96275725625355313, -0.3567357152820011),
                    complex(3.6393697204873954, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(0.76840260426801055, 0.87019628065047827),
                    complex(-0.46540957116130088, -1.1081177222021112),
                    complex(1.4870086981201611, -0.93708248306429187),
                    complex(1.1799295830137679, 0.92797911610027761),
                    complex(6.9112116413057718, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case4: {
            desc: 'uplo="l", trans="n", n=5, k=4, alpha=(0.2,0.8), beta=1, a(1,1)=0 v b(1,1)=0',
            input: {
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'u',
                trans: 'n',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                beta: 1,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(2.5707545096865392, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.83234463947385784, -0.92557347793263667),
                    complex(0.82512130865960043, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.76095407410155458, 0.31956495375059812),
                    complex(-0.10348433645507227, -8.8187029572272702e-2),
                    complex(1.8030101260786449, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-0.13138168575961512, -1.1742711258486065),
                    complex(-1.406610047245773, -0.98473983912948915),
                    complex(0.73848937116463265, 0.26150756179090506),
                    complex(4.0167653801725303, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(0.71129582996767371, 1.2289251663011131),
                    complex(3.819841719624284e-2, -1.1191632004864702),
                    complex(2.5727781130218945, -1.8777316348663549),
                    complex(0.48897573226761326, 0.81215379084965211),
                    complex(5.6266123371065531, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case5: {
            desc: 'uplo="l", trans="n", n=5, k=4, alpha=(0.2,0.8), beta=1, a(1,1)=0 v b(1,1)=0',
            input: {
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'l',
                trans: 'n',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                beta: 1,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.i && (m.r[0] = 0);
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(2.5707545096865392, 0.0),
                    complex(-0.23001094477743128, 4.3276409098331858e-2),
                    complex(1.7165022571514967, 1.7507862892685062),
                    complex(0.70536435124676267, 0.84004736369402755),
                    complex(1.1830440441827141, 0.88770681840957999),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(0.82512130865960043, 0.0),
                    complex(0.18021007377589254, -1.3057122025768517),
                    complex(2.2355817204467927, 0.16929054170135827),
                    complex(0.29818386412617515, -0.45566437370700763),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(1.8030101260786449, 0.0),
                    complex(0.55124643109638771, -1.9967010605297639e-2),
                    complex(1.7392321599865397, 3.3784470098129495),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(4.0167653801725303, 0.0),
                    complex(1.3132659482366984, -3.1518794342460295),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(5.6266123371065531, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case6: {
            desc: 'uplo="l", trans="n", n=5, k=4, alpha=(0.2,0.8), beta=0, a(1,1)=0 v b(1,1)=0',
            input: {
                //cmd: '',
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'l',
                trans: 'n',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                beta: 1,
                lda: 6, // physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(3.6025287727873598, 0.0),
                    complex(-0.56527642072708484, -4.4235421419301812e-2),
                    complex(2.8797310564492693, 1.8486052037085914),
                    complex(1.2373098448532591, 0.1939451297173807),
                    complex(2.0901620453582117, 1.6112109712987144),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(0.82512130865960043, 0.0),
                    complex(0.18021007377589254, -1.3057122025768517),
                    complex(2.2355817204467927, 0.16929054170135827),
                    complex(0.29818386412617515, -0.45566437370700763),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(1.8030101260786449, 0.0),
                    complex(0.55124643109638771, -1.9967010605297639e-2),
                    complex(1.7392321599865397, 3.3784470098129495),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(4.0167653801725303, 0.0),
                    complex(1.3132659482366984, -3.1518794342460295),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(5.6266123371065531, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case7: {
            desc: 'uplo="l", trans="n", n=5, k=4, alpha=(0.2,0.8), beta=0.5, a(1,1)=0 v b(1,1)=0',
            input: {
                //cmd: '',
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'l',
                trans: 'n',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                beta: 0.5,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(2.9710516552489077, 0.0),
                    complex(-0.40215974213154188, 0.17052112698539179),
                    complex(2.2148314092133989, 1.2294531346167945),
                    complex(0.60109517133412482, 0.3336182733426401),
                    complex(1.88284132540086, 0.73225942176868508),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(0.97248152921109121, 0.0),
                    complex(0.18309366010995715, -0.72242693045542217),
                    complex(1.0332550650589145, 0.70208585172180493),
                    complex(-8.3612853517562424e-2, 0.32622667424755192),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(1.952617680156747, 0.0),
                    complex(0.75700184367497048, 0.16838435233835175),
                    complex(1.6131204290533503, 2.1577647464386205),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(3.8280675503299628, 0.0),
                    complex(1.2465977656252329, -2.0399292751731535),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(6.2689119892061624, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case8: {
            desc: 'uplo="l", trans="n", n=5, k=4, alpha=(0.2,0.8), beta=0, a(1,1)=0 v b(1,1)=0',
            input: {
                //cmd: '',
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'l',
                trans: 'n',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(2.3395745377104555, 0.0),
                    complex(-0.23904306353599897, 0.38527767539008539),
                    complex(1.5499317619775281, 0.61030106552499741),
                    complex(-3.5119502185009782e-2, 0.4732914169678995),
                    complex(1.6755206054435083, -0.14669212776134405),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(1.1198417497625819, 0.0),
                    complex(0.18597724644402175, -0.13914165833399272),
                    complex(-0.16907159032896413, 1.2348811617422519),
                    complex(-0.46540957116130022, 1.1081177222021112),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(2.1022252342348491, 0.0),
                    complex(0.96275725625355346, 0.3567357152820011),
                    complex(1.4870086981201609, 0.93708248306429232),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(3.6393697204873954, 0.0),
                    complex(1.1799295830137675, -0.92797911610027772),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(6.9112116413057718, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case9: {
            desc: 'uplo="l", trans="c", n=5, k=4, alpha=(0.2,0.8), beta=0, a(1,1)=0 v b(1,1)=0',
            input: {
                //cmd: '',
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'u',
                trans: 'c',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(3.1476878135503865, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.29469241706829941, -0.69361000427875985),
                    complex(4.0500669722552383, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.36742658827363606, 0.90779156317481691),
                    complex(2.6609646250468799e-2, -1.2644121466149967),
                    complex(1.0465961268435413, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.71514447317466534, -5.1637874258017025e-2),
                    complex(5.9362659176806609e-2, -0.45332789330975831),
                    complex(-4.1181120977291652e-2, -0.22614482992219803),
                    complex(0.95666032954611491, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-0.17741805067471494, -0.88246217293517693),
                    complex(-0.278257117915511, 0.1282303735920764),
                    complex(-1.0599872384057019e-2, -0.18665144771536654),
                    complex(-0.69455433956435164, -0.23297790106179717),
                    complex(1.17609577134581, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case10: {
            desc: 'uplo="l", trans="c", n=5, k=4, alpha=(0.2,0.8), beta=0.5, a(1,1)=0 v b(1,1)=0',
            input: {
                //cmd: '',
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'l',
                trans: 'c',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                beta: 0.5,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(3.7791649310888387, 0.0),
                    complex(0.1315757384727565, 0.4788534558740663),
                    complex(0.2974730589622343, -0.28863949408302003),
                    complex(1.3513591466938, -8.8035269367242375e-2),
                    complex(2.990266928263674e-2, 1.7614137224652062),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(3.9027067517037475, 0.0),
                    complex(2.3726059916404196e-2, 0.68112687449356724),
                    complex(1.261689314564685, -7.9467416710688465e-2),
                    complex(0.10353959972822679, -0.91012142154663556),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(0.8969885727654392, 0.0),
                    complex(-0.24693653355587442, 3.779346697854874e-2),
                    complex(0.11551185854913237, 1.4073337110896953),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(1.1453581593886824, 0.0),
                    complex(-0.62788615695288619, -0.87897225801107881),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(0.53379611924620063, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case11: {
            desc: '(trivial) alpha=(0,0); beta=1',
            input: {
                //cmd: '',
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'l',
                trans: 'c',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 1,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: matrix_mxn(6, 6).toArr(),
            },
        },
        case12: {
            desc: 'near trivial, alpha=(0,0), beta =0.8, uplo="u"',
            input: {
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'u',
                trans: 'c',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0.8,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(1.0103634031171111, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.74285365257939162, -0.36222718301753964),
                    complex(-0.23577635639572669, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.91812564310618683, 0.66563769378718263),
                    complex(-0.23156926976992587, -0.18186295303498135),
                    complex(-0.23937209009188543, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.34854665321926248, -4.3901980577438771e-2),
                    complex(-0.99003078028605529, 0.2001130610721269),
                    complex(-0.179414310744618, 0.49459462902835938),
                    complex(0.30191653224701476, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-4.568542012103527e-2, 0.28698311279688937),
                    complex(0.40288639668951021, -8.8363827591595445e-3),
                    complex(0.86861554486476678, -0.7525193326550621),
                    complex(-0.55276308883373559, -9.2660261581245962e-2),
                    complex(-1.027679458672992, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case13: {
            desc: 'near trivial, alpha=(0,0), beta= 0, uplo="u"',
            input: {
                //cmd: '',
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'u',
                trans: 'c',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(0.0, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case14: {
            desc: 'near trivial, alpha=(0,0), beta =0.8, uplo="l"',
            input: {
                //cmd: '',
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'l',
                trans: 'c',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0.8,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(1.0103634031171111, 0.0),
                    complex(-0.26098668964187333, -0.34361048256770488),
                    complex(1.0638394514298355, 0.99064332530861066),
                    complex(1.0179434927991551, -0.22347703313048228),
                    complex(0.33171315687467384, 1.4063225002038848),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(-0.23577635639572669, 0.0),
                    complex(-4.6137382032534202e-3, -0.93325644930089169),
                    complex(1.9237226772863067, -0.85247250873554492),
                    complex(0.61087475733272356, -1.2510256953690302),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(-0.23937209009188543, 0.0),
                    complex(-0.32920866503132373, -0.3013621852004853),
                    complex(0.201778772499841, 1.9530916505022589),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(0.30191653224701476, 0.0),
                    complex(0.10666909376783806, -1.7791202810275593),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.027679458672992, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case15: {
            desc: 'near trivial, alpha=(0,0), beta= 0, uplo="l"',
            input: {
                ////cmd: '',
                //(UPLO, TRANS, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC
                uplo: 'l',
                trans: 'c',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    // m.r[0] = 0;
                    // m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(0.0, 0.0),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
    },
    cher2kErrors: {
        case0: {
            desc: 'a has no imaginary part',
            input: {
                uplo: 'l',
                trans: 'c',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                //dummies, its not a data test
                a: [0],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case1: {
            desc: 'b has no imaginary part',
            input: {
                uplo: 'l',
                trans: 'c',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [0],
                c: [complex(0, 0)],
            },
        },
        case2: {
            desc: 'c has no imaginary part',
            input: {
                uplo: 'l',
                trans: 'c',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [0],
            },
        },
        case3: {
            desc: 'uplo!="ul"',
            input: {
                uplo: 'x',
                trans: 'c',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case4: {
            desc: 'trans!="cn"',
            input: {
                uplo: 'l',
                trans: 'x',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case5: {
            desc: 'n<0',
            input: {
                uplo: 'l',
                trans: 'c',
                n: -5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case6: {
            desc: 'k<0',
            input: {
                uplo: 'l',
                trans: 'c',
                n: 5, // A = m*m marrix , lda >= m
                k: -4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case7: {
            desc: 'lda < max(1, nrowA)',
            input: {
                uplo: 'l',
                trans: 'n',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0,
                lda: 4, //physical storage
                ldb: 6, // physical storage
                ldc: 6, // physical storage
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case8: {
            desc: 'ldc < max(1, n)',
            input: {
                uplo: 'l',
                trans: 'n',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 6, // physical storage
                ldc: 4, // physical storage
                //dummies, its not a data test
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case9: {
            desc: 'ldb < max(1, nrowA)',
            input: {
                uplo: 'l',
                trans: 'n',
                n: 5, // A = m*m marrix , lda >= m
                k: 4, // columns
                alpha: complex(0, 0), // B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldb: 4, // physical storage
                ldc: 6, // physical storage
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
    },
};
