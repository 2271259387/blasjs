/* This is a conversion from BLAS to Typescript/Javascript
Copyright (C) 2018  Jacob K.F. Bogers  info@mail.jacob-bogers.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import { complex } from '../../../../src/lib/f_func';

import { matrix_mxn } from '../../../matrices';

export const fixture = {
    // C := alpha*op( A )*op( B ) + beta*C,
    // CGEMM(TRANSA,TRANSB,M,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)
    ctrmm: {
        case0: {
            desc: 'si="l", ul="u",trA="n", diag="n", alpha=(0.2,0.8)',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 'n',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(-0.41405065468799945, -1.5191217029575041),
                    complex(-0.69490876638628207, -1.4153085671446701),
                    complex(-0.83419064198640946, -0.50555104393530281),
                    complex(0.34645774818088582, 0.28057501053159395),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.94240802378391497, 1.8194772369531083),
                    complex(-2.9153658882833628, -2.3126831220695263),
                    complex(-1.5721870875427124, 0.75999293033223214),
                    complex(0.79851111695362287, 0.41539800883503275),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(0.30059598777530616, -4.7622991935580838e-4),
                    complex(-0.40030704404913392, 0.64982639160988953),
                    complex(0.33213353316073702, 0.20926732060823242),
                    complex(1.2837599485019321e-2, -0.19049002371540899),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.76325512471628953, 0.79546193461507575),
                    complex(-0.83792405458526675, 0.51076886233492236),
                    complex(-3.6959496736776953e-2, -5.4805674326484782e-2),
                    complex(0.12676149970562242, 6.4043945950648051e-2),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-1.6508024981725062, -0.64423594455874311),
                    complex(0.37551185028990675, 7.4690390701194542e-2),
                    complex(-0.10496880817482218, 0.15546792320308533),
                    complex(-0.11660175095677679, -0.20949314958488327),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(0.67662846150460598, 0.40970986840795259),
                    complex(0.18500013285725259, 1.1724732013706247),
                    complex(0.51842448361866889, 1.3901729555213557e-2),
                    complex(-0.15617033770313232, -0.15971929721539613),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case1: {
            desc: 'si="l", ul="u",trA="n", diag="u", alpha=(0.2,0.8)',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 'n',
                diag: 'u',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(-0.41405065468799945, -1.5191217029575041),
                    complex(-4.58785282700791e-2, -1.6328225075105753),
                    complex(-1.4266711201397058, 1.3912352824123402),
                    complex(0.47796290633027105, 0.96207423451653451),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.76589425391122323, 0.98606678861933172),
                    complex(-1.7952358832719872, -2.3286074808032682),
                    complex(-0.4245062587947831, 0.20280603525803245),
                    complex(1.3334031780571216, 1.7106045501024205),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.59457311678842317, -0.75219244957874709),
                    complex(-9.2946084873448687e-3, 0.39429243933295322),
                    complex(-7.1771211921762917e-2, 4.0015163033017165e-2),
                    complex(0.21906001894265437, -0.40454921133144506),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.89429376859854393, 1.1330330926899785),
                    complex(-0.63534501209259031, -1.0787114552230488),
                    complex(-0.75266008085101577, 1.631006856151182e-2),
                    complex(0.2135779353019287, 0.267391831686971),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-1.9492069659996545, -0.61817558648055604),
                    complex(0.18397794917513985, 0.68461246633872708),
                    complex(1.3359479596257482, 0.78149896871615987),
                    complex(-4.5530510627187937e-2, -0.57592815422904708),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(1.7695659025695811, -6.3875064777400237e-2),
                    complex(-3.414128889417789e-2, 0.37099623206041554),
                    complex(6.8604956493863833e-2, -0.2959671180143853),
                    complex(-0.18212487372942077, -0.50651968429266925),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case2: {
            desc: 'si="l", ul="l",trA="n", diag="n", alpha=(0.2,0.8)',
            input: {
                side: 'l', //A*B
                uplo: 'l',
                transA: 'n',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(-0.37066642795896643, -0.12937536991789439),
                    complex(-0.53847920794539261, -0.90801649455416311),
                    complex(1.4384450317723125, -1.1169017108178481),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.0, 0.0),
                    complex(-0.92898483439414603, -0.19018934561877915),
                    complex(0.57848959639076525, -1.275859708056164),
                    complex(1.3474196179958526, -2.5611815252913859),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(0.0, -0.0),
                    complex(-0.29787973916147625, 0.60822070451199339),
                    complex(-0.45228594812363454, -2.2680385476264697),
                    complex(-1.2911708889627647, -1.5158614406578568),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.0, 0.0),
                    complex(-0.54795774185350954, 0.48306801661471988),
                    complex(-1.1615060277364126, 1.011888532369323),
                    complex(-1.4892507275872222, -1.1002656652229008),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-0.0, 0.0),
                    complex(0.40963463948849754, -8.9577905665065391e-2),
                    complex(-0.43354575166980625, -0.41052366517593775),
                    complex(5.8696244842979695e-2, 0.10846525402097236),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(0.0, 0.0),
                    complex(-0.74215273248827995, 0.12542282209793743),
                    complex(1.7852967366485175, 1.2067822355121136),
                    complex(-0.24207421890203995, -1.278638141184665),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case3: {
            desc: 'si="l", ul="l",trA="n", diag="u", alpha=(0.2,0.8)',
            input: {
                side: 'l', //A*B
                uplo: 'l',
                transA: 'n',
                diag: 'u',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(0.27836381015723655, -0.34688931028379955),
                    complex(-1.1309596860986888, 0.98876983179347988),
                    complex(1.5699501899216979, -0.43540248683290739),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.17651376987269174, -0.83341044833377653),
                    complex(0.19114517061722991, -0.2061137043525213),
                    complex(1.7261704251386947, -1.8330466031303638),
                    complex(1.8823116790993515, -1.265974984023998),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.89516910456372933, -0.75171621965939117),
                    complex(9.3132696400312798e-2, 0.35268675223505719),
                    complex(-0.8561906932061345, -2.437290705201685),
                    complex(-1.0849484695051297, -1.7299206282738928),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.13103864388225439, 0.33757115807490279),
                    complex(-0.34537869936083304, -1.1064123009432514),
                    complex(-1.8772066118506514, 1.0830042752573195),
                    complex(-1.4024342919909158, -0.89691777948657769),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-0.29840446782714819, 2.6060358078187074e-2),
                    complex(0.21810073837373067, 0.52034416997246713),
                    complex(1.0073710161307641, 0.21550738033713684),
                    complex(0.12976748517256848, -0.25796975062319144),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(1.092937441064975, -0.47358493318535277),
                    complex(-0.96129415423971043, -0.67605414721227164),
                    complex(1.3354772095237124, 0.89691338794251474),
                    complex(-0.26802875492832845, -1.6254385282619381),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case4: {
            desc: 'si="r", ul="u",trA="n", diag="n", alpha=(0.2,0.8)',
            input: {
                side: 'r', //A*B
                uplo: 'u',
                transA: 'n',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    const c6 = m.colOfEx(6);
                    m.r[c6 + 1] = 0;
                    m.i && (m.i[c6 + 1] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(0.0, -0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.74545578758485487, 9.875599711318489e-2),
                    complex(-0.92898483439414603, -0.19018934561877915),
                    complex(0.79406741038861639, -1.5951187526018875),
                    complex(1.0221070516320989, -2.7233636737611393),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(0.22735583281902055, 0.18780057023632762),
                    complex(-0.26124426021125918, 0.72410698226569692),
                    complex(-0.45228594812363454, -2.2680385476264697),
                    complex(-1.3040084884477841, -1.3253714169424478),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.76325512471628953, 0.79546193461507575),
                    complex(-0.73568199780245913, 0.34435907640969454),
                    complex(-1.3747179018729143, 1.0839642544183627),
                    complex(-1.4892507275872222, -1.1002656652229006),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-1.2462339501523765, -0.43452275964895037),
                    complex(0.66985596056305741, -0.4096388490753039),
                    complex(-0.75833799382131772, -1.9739152075580129),
                    complex(-0.35217871501270248, 0.88540810150424742),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(1.8401026154629083, 0.15865960269230969),
                    complex(-0.11242079794698363, 0.94650556496923932),
                    complex(0.53881340035045766, 0.58176305552934204),
                    complex(-1.6019671547082783, -1.4204888527818205),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case5: {
            desc: 'si="r", ul="u",trA="n", diag="u", alpha=(0.2,0.8)',
            input: {
                side: 'r', //A*B
                uplo: 'u',
                transA: 'n',
                diag: 'u',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(0.27836381015723655, -0.34688931028379955),
                    complex(-0.72468346245115178, 1.3115002827569882),
                    complex(0.47796290633027105, 0.96207423451653451),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.17651376987269174, -0.83341044833377653),
                    complex(0.19114517061722991, -0.2061137043525213),
                    complex(2.1988465083684905, -1.1276187450483688),
                    complex(1.3251943645016633, 0.60084017125167333),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.1357211635016546, -0.55060255578260042),
                    complex(-0.17390910356897638, 0.33118569648332224),
                    complex(-0.8561906932061345, -2.437290705201685),
                    complex(-1.1270680619558762, -1.9092679197542792),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.78656763826347009, 1.0282555521697014),
                    complex(-0.85210609902704482, -0.31816043104760328),
                    complex(-1.7009542344509263, 0.9561228788817947),
                    complex(-1.4024342919909158, -0.89691777948657769),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-1.9492069659996545, -0.61817558648055604),
                    complex(0.59361258866363742, 0.59503456067366178),
                    complex(0.90240220795594195, 0.37097530354022212),
                    complex(1.3165734215791744e-2, -0.46746290020807468),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(1.5522010148990604, -5.0652033084237352e-2),
                    complex(-0.70434820883860283, 0.78971031125986146),
                    complex(2.5455767640142994, 1.4239340453601215),
                    complex(-0.44625571973813855, -2.2045862330913715),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case6: {
            desc: 'si="r", ul="l",trA="n", diag="n", alpha=(0.2,0.8)',
            input: {
                side: 'r', //A*B
                uplo: 'l',
                transA: 'n',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    const c2 = m.colOfEx(1);
                    m.r[c2 + 2] = 0;
                    m.i && (m.i[c2 + 2] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(-1.5855558497137823, -0.88679594688315189),
                    complex(-0.16263993725816017, -0.5961375587106752),
                    complex(-1.0223398005499513, 1.7784779276016929),
                    complex(2.6967577459040637, 0.37291596442254626),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-1.455063610577763, 3.9484377185545276),
                    complex(-1.4668178548226742, -2.3536669078064918),
                    complex(0.33118719205881808, -1.0349663957667417),
                    complex(1.1515637421064389, -1.6259125522497935),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.94921398100179522, -1.3703864354141615),
                    complex(-1.0130910644010049, 1.6811452270216223),
                    complex(-1.0662469530871845, 3.240081162177701),
                    complex(1.2091099992327403, 0.32906473142285109),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.40639367076936217, -0.99002941370790132),
                    complex(-0.20458752516298695, -0.25098793402106362),
                    complex(0.8246536258192052, -1.8718384058185786),
                    complex(-1.9466246653527595, -8.8695100984435421e-2),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(0.57036966417670953, 0.45236320338369213),
                    complex(0.25453548380504148, -0.71809771747508244),
                    complex(-0.63245831397658492, -1.747420977411535),
                    complex(-0.29667373591331025, 0.70915291624679455),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(1.3808390416288232, -0.26427329740880573),
                    complex(-0.36936674334809128, -0.51925889350289378),
                    complex(-0.25232593636761924, -0.41552068140220522),
                    complex(-7.9444826994691242e-2, -0.63033368764190212),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case7: {
            desc: 'si="r", ul="l",trA="n", diag="u", alpha=(0.2,0.8)',
            input: {
                side: 'r', //A*B
                uplo: 'l',
                transA: 'n',
                diag: 'u',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(-2.0011012320269455, -0.69072463433261544),
                    complex(-0.25494255505989005, -1.0724022389123691),
                    complex(-2.1532994866486401, 2.7672477593951728),
                    complex(3.4744471146982159, 0.20421980543002827),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.53309405312021629, 3.0162712731075665),
                    complex(-0.34668784981129874, -2.3695912665402337),
                    complex(1.7359662900386923, -0.56746638821322293),
                    complex(1.454651054976003, 1.6982912927630189),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-2.3122909773224705, -2.1087895614330892),
                    complex(-0.92575590775872207, 1.2882239412392475),
                    complex(-1.4701516981696845, 3.0708290046024858),
                    complex(1.3860504257246484, -0.25483177138898028),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.42970618431654273, -0.75723579615327563),
                    complex(-0.32101162638757264, -0.91350744147836149),
                    complex(0.49841729324119322, -1.9996797813551468),
                    complex(-1.8598082297564531, 0.11465278475188753),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-0.13260335167056853, 0.26871037655208646),
                    complex(0.1782921119056215, 0.28657569227388313),
                    complex(1.028281887800675, 0.59746953368669975),
                    complex(6.867071331518397e-2, -0.64371808546552767),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(1.092937441064975, -0.47358493318535277),
                    complex(-0.40133057238654146, -0.36112240494970083),
                    complex(-0.28539219327855392, -0.2969657375956436),
                    complex(-0.18212487372942077, -0.50651968429266925),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case8: {
            desc: 'si="r", ul="u",trA="t", diag="u", alpha=(0.2,0.8)',
            input: {
                side: 'r', //A*B
                uplo: 'u',
                transA: 't',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    // A(1,2) = 0
                    const c2 = m.colOfEx(2);
                    m.r[c2 + 1] = 0;
                    m.i && (m.i[c2 + 1] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.80360148607009863, -1.2966782756548307),
                    complex(-0.72840520031893596, 0.7095861805484498),
                    complex(-0.42560235060906071, 0.77769248040365224),
                    complex(-0.27678585145094492, 1.1468217123407773),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-1.4738609879037909, 0.80834217766163474),
                    complex(0.58640633529412922, 0.96682899167147351),
                    complex(1.0049561183225213, -0.26669771568822748),
                    complex(0.79868302758779752, -1.9049819683022284),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.42560235060906082, 0.77769248040365235),
                    complex(1.4776322015523173, 0.43873014239376767),
                    complex(2.1769827423749217, -0.45338466957056028),
                    complex(-0.55753175924381959, -0.15683583700867554),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-0.36198407928577808, 0.50026970868546716),
                    complex(-7.625773636122174e-2, -0.35868550178546099),
                    complex(-0.59965135169456618, -0.33618312848906179),
                    complex(0.24286860372209002, 0.78433687712996214),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(1.2079338108206821, -0.11352827495281692),
                    complex(-9.8948131295274078e-2, -0.87413012598105055),
                    complex(-0.8927871764025983, -1.8856919508018803),
                    complex(-0.53353125603634632, 0.40534044116477896),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(1.3808390416288232, -0.26427329740880573),
                    complex(-0.36936674334809128, -0.51925889350289378),
                    complex(-0.25232593636761924, -0.41552068140220522),
                    complex(-7.9444826994691242e-2, -0.63033368764190212),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case9: {
            desc: 'si="r", ul="u",trA="c", diag="n", alpha=(0.2,0.8)',
            input: {
                side: 'r', //A*B
                uplo: 'u',
                transA: 'c',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    // A(1,2) = 0
                    const c2 = m.colOfEx(2);
                    m.r[c2 + 1] = 0;
                    m.i && (m.i[c2 + 1] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.88413225780280391, 3.5365290312112156),
                    complex(0.23049135604138971, -0.76831558403966627),
                    complex(0.60538659511159443, -0.33675159754694883),
                    complex(5.1135244164336124e-2, 0.31930091820410589),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(7.6476354588525641e-2, -0.17696880204670801),
                    complex(0.63821565790157031, 2.5528626316062808),
                    complex(1.2252455562261795, 1.6605643502742038),
                    complex(-2.0881982473190148, 0.43895243955561353),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.69263598276761806, -1.2245953077145752e-2),
                    complex(-0.76533527789176059, 1.331723183627652),
                    complex(0.58121247821662603, 2.3248499128665041),
                    complex(0.38960418749372067, -0.53269441917795068),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-0.54640540337432653, 0.33367302859355708),
                    complex(0.10830410679399463, -0.43544176321032629),
                    complex(-0.7768100891138261, -0.26053509884876885),
                    complex(0.21782701220686007, 0.87130804882744006),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(1.1473127021466114, -0.64178235396557448),
                    complex(-0.76586265750711346, -0.68018138205777434),
                    complex(-2.0133138785636668, -0.29425112677260773),
                    complex(0.38578941017656743, 0.33810626909249047),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(1.1370958875071255, -0.82678278720841325),
                    complex(-0.55522804897371414, -0.31270337894923239),
                    complex(-0.40516729696746967, -0.26863595497405601),
                    complex(-0.34013873176868742, -0.53659824959017932),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case10: {
            desc: 'si="r", ul="u",trA="c", diag="u", alpha=(0.2,0.8)',
            input: {
                side: 'r', //A*B
                uplo: 'u',
                transA: 'c',
                diag: 'u',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(1.0975822800182025, 4.3903291200728098),
                    complex(0.12760523749832176, -0.46704938051864731),
                    complex(-0.87708709858386569, 1.6177219532921399),
                    complex(-1.4835904302906053, 0.29670771595802359),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.38842123088837754, -1.4028694431728281),
                    complex(1.0890749734962946, 1.5273526653605487),
                    complex(2.2340921110675858, 0.5769642395468586),
                    complex(1.061483141535889, 1.544257949865548),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.6555934364546592, -1.2271249663133155),
                    complex(-0.53054138907503723, 1.0047883335719767),
                    complex(0.27638780759211024, 2.0104182730420739),
                    complex(0.78187593340837447, -0.99999081107510046),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-0.40654746006137599, 0.52122594740403128),
                    complex(-0.33265304316152478, -0.9434215472672498),
                    complex(-1.122299346286868, -0.20213359911586032),
                    complex(0.39695967563949031, 1.0009187930372172),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(0.48681643885820763, -0.33905457526875138),
                    complex(-0.18902710702717307, 0.14591937433802404),
                    complex(0.75657544192683979, 0.4701327290683926),
                    complex(-0.1875929848493442, -0.94055285003602984),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(1.092937441064975, -0.47358493318535277),
                    complex(-0.40133057238654146, -0.36112240494970083),
                    complex(-0.28539219327855392, -0.2969657375956436),
                    complex(-0.18212487372942077, -0.50651968429266925),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case11: {
            desc: 'si="r", ul="l",trA="t", diag="n", alpha=(0.2,0.8)',
            input: {
                side: 'r', //A*B
                uplo: 'l',
                transA: 't',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(0.0, -0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.74545578758485487, 9.875599711318489e-2),
                    complex(-0.75324451429914752, -0.39265469604202657),
                    complex(0.32704638353984439, -0.82202196011892226),
                    complex(1.2876119054703419, -2.1327513303616947),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.50534217392263092, -0.21442243626824406),
                    complex(0.36368186249006157, -0.70613568236521862),
                    complex(-2.7395031753961647, -0.25623058934581977),
                    complex(1.4742247368639692, 0.48520215164836378),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-0.27069557709676256, -1.4408250671297336),
                    complex(0.80104014931274903, -2.3429315095287957),
                    complex(1.2610128627274675, 0.55727787369740334),
                    complex(5.7903235640717785, 3.931203121716571),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(1.6137084509525672, -3.3241435705303868),
                    complex(-0.69718875941521663, -0.41142164376826551),
                    complex(-2.7676538957388477, -3.5544077706871899),
                    complex(3.455300326801356, 1.2305711295775565),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(2.9159067910592666, 2.0230227013901896),
                    complex(-2.5937574716388743, 1.1974729524258667),
                    complex(-0.86996143321297437, -0.28693208145023652),
                    complex(-4.2688440645033303, -1.5747115626841861),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case12: {
            desc: 'si="r", ul="l",trA="t", diag="u", alpha=(0.2,0.8)',
            input: {
                side: 'r', //A*B
                uplo: 'l',
                transA: 't',
                diag: 'u',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    const c5 = m.colOfEx(5);
                    m.r[c5 + 6] = 0;
                    m.i && (m.i[c5 + 6] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(0.27836381015723655, -0.34688931028379955),
                    complex(-0.72468346245115178, 1.3115002827569882),
                    complex(0.47796290633027105, 0.96207423451653451),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.17651376987269174, -0.83341044833377653),
                    complex(0.36688549071222848, -0.40857905477576872),
                    complex(1.7318254815197185, -0.35452195256540342),
                    complex(1.590699218339906, 1.1914525146511177),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.8684191702433062, -0.95282556228717208),
                    complex(0.45101701913234438, -1.0990569681475932),
                    complex(-3.1434079204786647, -0.42548274692103505),
                    complex(1.6511651633558773, -9.8694351163467475e-2),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-0.24738306354958201, -1.2080314495751079),
                    complex(0.68461604808816334, -3.0054510169860937),
                    complex(0.9347765301494555, 0.42943649816083518),
                    complex(5.8771399996680849, 4.1345510074528935),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(0.91073543510528943, -3.5077963973619921),
                    complex(-0.77343213131463662, 0.59325176598069995),
                    complex(-1.106913693961588, -1.2095172595889556),
                    complex(3.8206447760298499, -0.12229987213476567),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(2.6482619617292493, 1.8847858699956568),
                    complex(-2.5337710479612436, 1.3103454268495009),
                    complex(-0.78347996939081122, -0.43509003877870955),
                    complex(-4.5089230042775732, -1.4129562619614073),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case13: {
            desc: 'si="r", ul="l",trA="c", diag="u", alpha=(0.2,0.8)',
            input: {
                side: 'r', //A*B
                uplo: 'l',
                transA: 'c',
                diag: 'u',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    const c5 = m.colOfEx(5);
                    m.r[c5 + 6] = 0;
                    m.i && (m.i[c5 + 6] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(0.27836381015723655, -0.34688931028379955),
                    complex(-0.72468346245115178, 1.3115002827569882),
                    complex(0.47796290633027105, 0.96207423451653451),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.17651376987269174, -0.83341044833377653),
                    complex(0.66487249453236275, -0.16945725049517865),
                    complex(0.60521238569303681, -0.97704402889329045),
                    complex(0.76425225068447145, 1.6020351707669773),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(7.6044990337531204e-2, -0.54099403311368255),
                    complex(0.53026247041002827, -0.37296042718609101),
                    complex(0.65978377841827551, 3.5440021563467341),
                    complex(4.2764413044570349e-2, 1.8285965014649763),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(2.09511274730629, -1.5062738982448116),
                    complex(1.9442693783645022, -1.4635635455859775),
                    complex(0.84936080151773674, 1.8055481545990144),
                    complex(1.9988175236763277, 7.4083501851845668),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-1.6545957269940992, 1.9979637069394474),
                    complex(2.0930886407551093, -1.0842007024239364),
                    complex(3.587342534059919, 3.185961866409178),
                    complex(-1.311523951320859, 2.2479205698486275),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(1.0631408799427013, 0.38373508406534801),
                    complex(-1.0368134258781332, -1.3392003038132692),
                    complex(0.57404130196598691, -3.5755577606890991),
                    complex(0.49453806642375003, -4.1450339641797251),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case14: {
            desc: 'si="r", ul="l",trA="c", diag="n", alpha=(0.2,0.8)',
            input: {
                side: 'r', //A*B
                uplo: 'l',
                transA: 'c',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    const c5 = m.colOfEx(5);
                    m.r[c5 + 6] = 0;
                    m.i && (m.i[c5 + 6] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(0.0, -0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.64141135534959504, 0.39249019279234365),
                    complex(0.21401317893763838, 0.85605271575055353),
                    complex(-0.40363416914836958, 0.10655608183405463),
                    complex(-2.3854291381704322, 0.49672966045704314),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(1.0390024440245722, 0.67388498012248721),
                    complex(0.2954685815933048, -4.6025577130415884e-2),
                    complex(0.9646084490427913, 3.8584337961711643),
                    complex(-0.34950733287008329, 2.2958928933621263),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(1.9552548039933393, -1.6938268170552857),
                    complex(2.3852265283200214, -0.95558376152905389),
                    complex(1.1948500586907784, 1.7471466548661059),
                    complex(1.8196848602436977, 7.2787394409747899),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-0.99409946370569546, 1.6952359282426244),
                    complex(1.5162530902751685, -1.9103014588197347),
                    complex(0.81745321356941236, 2.4215780105681777),
                    complex(-0.73814155629494738, 3.5265796889771472),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(1.1072993263848516, 3.0537230042287533e-2),
                    complex(-1.190710902465306, -1.2907812778128007),
                    complex(0.45426619827707126, -3.5472279780675109),
                    complex(0.33652420838448333, -4.1751125294772349),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case15: {
            desc: 'si="r", ul="l",trA="c", diag="u", alpha=(1,0)',
            input: {
                side: 'r', //A*B
                uplo: 'l',
                transA: 'c',
                diag: 'u',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(1, 0), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(-3.8107374280249573e-3, -0.83204329013824463),
                    complex(-0.9714599060770972, -0.99938044736261133),
                    complex(2.1095273020221761, -0.42793347361473799),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.6140973855895886, -0.24858058290286267),
                    complex(-0.2828174188252025, -0.73353243284192793),
                    complex(4.3634682890396119, 0.26613736152648926),
                    complex(2.1638677380218803, 0.48751141899630657),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-1.1558772903269556, -2.9078602176900858),
                    complex(-1.1499955134459103, -2.7178355651022663),
                    complex(2.3739862645994934, -0.46820441992672013),
                    complex(9.303593468546417, -0.17262350022792816),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(1.8638997077444621, 2.5342195548594928),
                    complex(-0.65991592220785034, -2.7813397425090356),
                    complex(4.8032911048067461, -3.2833553245537517),
                    complex(2.2588700628324627, 2.2041224304301528),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(0.84838005047449583, -1.1072937862687229),
                    complex(-1.8596191095034653, 0.70337610919250393),
                    complex(-4.2148538954385284, -2.0339725290479649),
                    complex(-4.7914039773363903, -1.6389562884364799),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case16: {
            desc: 'si="r", ul="u",trA="c", diag="u", alpha=(1,0)',
            input: {
                side: 'r', //A*B
                uplo: 'u',
                transA: 'c',
                diag: 'u',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(1, 0), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(5.4879113183147608, 0.0),
                    complex(-0.51193889959982997, -0.28749126939602698),
                    complex(1.6452354797736968, 1.5076677268362355),
                    complex(-8.7282224128367281e-2, 1.8326674541971397),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-1.7646761512277145, 4.4357493568634165e-2),
                    complex(2.1172016257860871, -0.83204329013824463),
                    complex(1.3358673534043253, -2.458648258870193),
                    complex(2.1289749509222951, -0.79461016941762352),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.9306156482045029, 1.5868378526793676),
                    complex(1.0260623215377946, 0.91969230684614178),
                    complex(2.4464884634740116, 0.26613736152648926),
                    complex(-0.94649625380552649, -1.2139689656482757),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.49363420721920326, 0.63159286930898451),
                    complex(-1.2077468150121478, 0.11387959400272329),
                    complex(-0.56789226881724841, 1.2609010947498187),
                    complex(1.2943043477099385, -0.17262350022792816),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-0.25570642625344142, -0.67244714606845735),
                    complex(0.1160736424835806, 0.26530229088395729),
                    complex(0.77561950556013648, -0.75181441192620013),
                    complex(-1.1617071547461155, -5.5935561119040189e-2),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case17: {
            desc: 'si="l", ul="u",trA="t", diag="n", alpha=(0.2,0.8)',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 't',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(-0.37066642795896637, -0.12937536991789439),
                    complex(-0.29163650516331752, -0.5481549944687647),
                    complex(-0.55955982623885359, 3.7336090567630764e-2),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.0, 0.0),
                    complex(-1.0546992161128539, 0.30769421901217936),
                    complex(8.2398666254513975e-3, 1.4010951255374888),
                    complex(0.11753648309305995, 1.3217121569037471),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.0, 0.0),
                    complex(0.22381768062330257, 1.0818360809917658),
                    complex(1.6850995150621415, 0.15300599796037123),
                    complex(-0.32629307536500785, -0.22190535570622069),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.0, 0.0),
                    complex(-0.61903115607519377, 0.27668814981831602),
                    complex(-0.33913067485002718, -3.1415331990811701e-2),
                    complex(1.1469169235729075, 0.93424402758150493),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-0.0, 0.0),
                    complex(0.58998015244965418, -9.8330804296849372e-2),
                    complex(-9.1088388869482798e-2, -0.36462661872837543),
                    complex(-1.1191619149239813, -0.20332913599157931),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(0.0, 0.0),
                    complex(-1.4114865153211158, 0.38524537384662705),
                    complex(-0.66176873834509842, 1.6615566400565469),
                    complex(1.1286101466529936, -0.18935841879185145),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case18: {
            desc: 'si="l", ul="u",trA="c", diag="n", alpha=(0.2,0.8)',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 'c',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(0.20658741812567161, 0.33384611099939526),
                    complex(0.56415772813611242, -3.5864145744237699e-2),
                    complex(0.55639669371665934, 0.95915212435948338),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.0, 0.0),
                    complex(0.36928125955106716, 1.4771250382042687),
                    complex(-1.3224202310964879, 0.88706104385778084),
                    complex(-0.87697445703111332, 0.34538926500849226),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(0.0, 0.0),
                    complex(1.3655580312964728, 0.47749750643288325),
                    complex(0.46104884191169448, 1.8441953676467779),
                    complex(-0.47288022033304189, 3.0710173006515615e-2),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.0, 0.0),
                    complex(0.63952079500403669, -0.34952714820199982),
                    complex(0.62031596362369024, -0.16585541403550869),
                    complex(0.47833016477305745, 1.9133206590922298),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(0.0, 0.0),
                    complex(-0.10038099205145037, -0.18624235722792018),
                    complex(0.1323129556273609, -0.3343746711395334),
                    complex(0.11867863234141812, -1.5055976296596021),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.0, 0.0),
                    complex(-0.38168423312950805, 0.70712566556379863),
                    complex(-1.4437390741996847, -0.18775508138812175),
                    complex(0.80760542532107915, 0.42138113884269468),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case19: {
            desc: 'si="l", ul="u",trA="c", diag="u", alpha=(0.2,0.8)',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 'c',
                diag: 'u',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(0.27836381015723655, -0.34688931028379955),
                    complex(-0.72640119980556284, 1.4751914913261448),
                    complex(1.0200550955487424, 1.4756360886047346),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.17651376987269174, -0.83341044833377653),
                    complex(0.82014057514579153, 0.45161507195853645),
                    complex(-4.8096421601923317e-2, 0.82600902281652555),
                    complex(0.24849869396138569, 1.1802423586533526),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.89516910456372933, -0.75171621965939117),
                    complex(1.2955602277309608, 1.5665683118121054e-2),
                    complex(0.15622417128717869, 1.5297637278223477),
                    complex(-0.40632720262437055, -0.25897882906927494),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.13103864388225439, 0.33757115807490279),
                    complex(-0.72214573317092912, -1.1941277724081236),
                    complex(-6.5701972724606039e-2, -0.38187431597790589),
                    complex(0.65746282820568758, 2.0429314033020063),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-0.29840446782714819, 2.6060358078187074e-2),
                    complex(0.37484682644882089, 0.24136575091516732),
                    complex(1.2110243796907718, 0.8077889184001279),
                    complex(-9.087595054649289e-3, -1.8563133620805055),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(1.092937441064975, -0.47358493318535277),
                    complex(-1.2017646027949078, 0.57349751601671528),
                    complex(-1.7354912455895453, -0.64953097959654493),
                    complex(0.6067764876208992, 0.13745881812890565),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case20: {
            desc: 'si="l", ul="l", trA="c", diag="u", alpha=(0.2,0.8)',
            input: {
                side: 'l', //A*B
                uplo: 'l',
                transA: 'c',
                diag: 'u',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(1.0579567752247829, 4.2318271008991317),
                    complex(-1.1232566087643057, 1.6229204428910589),
                    complex(-1.2837863590779532, 1.0956462503362694),
                    complex(0.47796290633027105, 0.96207423451653451),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(2.3150280007745794, 0.63685860791603754),
                    complex(2.2624427795069453, 6.2208238894031505),
                    complex(-0.26099622425819252, -0.43956352857782066),
                    complex(1.3334031780571216, 1.7106045501024205),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.0180848632672184, -0.97144175027114776),
                    complex(1.3005417206512548, -1.3335192952681145),
                    complex(-0.21050369340669117, 6.2852269046868234e-2),
                    complex(0.21906001894265437, -0.40454921133144506),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(9.1466090301429492e-2, 1.4457155942587572),
                    complex(-0.15080443493975754, -0.69841399511728985),
                    complex(-0.72806507098245399, -8.5344896367701872e-2),
                    complex(0.2135779353019287, 0.267391831686971),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(1.7288259843431792, -1.0989849595005481),
                    complex(-0.18565033215892085, 9.452060919265666e-2),
                    complex(1.2053632224825974, 0.90033491421473744),
                    complex(-4.5530510627187937e-2, -0.57592815422904708),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(0.5414767835497718, -1.2650404084853966),
                    complex(4.8542259658938658e-2, -2.1044146714297556),
                    complex(-1.9638490419892997e-2, -0.15713434073977314),
                    complex(-0.18212487372942077, -0.50651968429266925),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case21: {
            desc: 'si="l", ul="l", trA="t", diag="n", alpha=(0.2,0.8)',
            input: {
                side: 'l', //A*B
                uplo: 'l',
                transA: 't',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(-1.950598952386057, 1.9309139091119321),
                    complex(3.3379829105481416, 2.512597566221801),
                    complex(3.3526092371972349e-2, -1.161239935386631),
                    complex(0.34645774818088576, 0.28057501053159395),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(3.3379829105481416, 2.512597566221801),
                    complex(4.2328018567093171, 1.220296567181304),
                    complex(-0.11989825912852629, -0.88696985726543032),
                    complex(0.79851111695362287, 0.41539800883503269),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.1259074284934896, -1.1241088862647408),
                    complex(-0.38694005909781548, -0.90847091301716532),
                    complex(-0.11138852965241561, 6.706341408484115e-2),
                    complex(1.2837599485019321e-2, -0.19049002371540902),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-0.55955982623885359, 3.7336090567630764e-2),
                    complex(8.6367840531936746e-2, 1.6945018096253788),
                    complex(0.18908997688474419, -0.31737142009093378),
                    complex(0.12676149970562242, 6.4043945950648065e-2),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(0.3643594201553883, 1.207779783650871),
                    complex(0.36614546512502311, -2.6807521256975955),
                    complex(-0.6694609565446179, 0.30860680363026749),
                    complex(-0.1166017509567768, -0.2094931495848833),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.4091952453956692, -1.0517548546196733),
                    complex(-1.504664531743181, -0.24893633540388876),
                    complex(4.8566345127667304e-2, 0.28994837960133141),
                    complex(-0.15617033770313232, -0.1597192972153961),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case22: {
            desc: 'si="l", ul="l", trA="c", diag="n", alpha=(0.2,0.8)',
            input: {
                side: 'l', //A*B
                uplo: 'l',
                transA: 'c',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(1.0579567752247829, 4.2318271008991317),
                    complex(-1.1950330007958705, 2.3036558641742535),
                    complex(6.772568863721809e-3, -0.41540938673411332),
                    complex(1.4304504498188167e-2, 0.44559027027128345),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(2.1385142309018876, 1.4702690562498142),
                    complex(1.8115834639122208, 7.2463338556488832),
                    complex(-1.5353200337527573, -0.37851150753656526),
                    complex(0.20793002706462263, 0.87575145645756003),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.12291575870348909, -0.21972553061175656),
                    complex(1.3705395242167671, -0.87168747195335228),
                    complex(9.4320977217824606e-2, 0.37728390887129842),
                    complex(0.15250700123398303, -0.11486020925565452),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-3.9572553580824898e-2, 1.1081444361838544),
                    complex(1.2108620932352083, 0.14618662908883401),
                    complex(-4.2047134634157643e-2, 0.1306740055746953),
                    complex(3.4445271869298473e-2, 0.13778108747719389),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(2.0272304521703273, -1.1250453175787349),
                    complex(-0.66087815065919209, -0.33308749895043088),
                    complex(0.12665179841918656, -0.24182867532492397),
                    complex(8.223571676887953e-2, -0.22521242180814338),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.55146065751520323, -0.79145547530004379),
                    complex(0.86862262932433842, -1.9707865218826723),
                    complex(0.27211368096996741, 0.30464155746865007),
                    complex(1.8704063970759049e-2, -0.22259736357888021),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case23: {
            desc: '(trivial, alpha=(0,0))',
            input: {
                side: 'l', //A*B
                uplo: 'l',
                transA: 'c',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0, 0), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: [
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case24: {
            desc: '(trivial, (n=0)',
            input: {
                side: 'l', //A*B
                uplo: 'l',
                transA: 'c',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 0, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m.toArr();
                })(),
            },
        },
        case25: {
            desc: '(trivial, (m=0)',
            input: {
                side: 'l', //A*B
                uplo: 'l',
                transA: 'c',
                diag: 'n',
                m: 0, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                lda: 6, //NBupper 4x4 of A is referenced
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                ldb: 4,
            },
            expect: {
                b: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m.toArr();
                })(),
            },
        },
    },
    ctrmmErrors: {
        case0: {
            desc: 'a has no imaginary part',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 'n',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                lda: 6, //NBupper 4x4 of A is referenced
                ldb: 4,
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                //dummies, its not a data test
                a: [0],
                b: [complex(0, 0)],
            },
        },
        case2: {
            desc: 'b has no imaginary part',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 'n',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                lda: 6, //NBupper 4x4 of A is referenced
                ldb: 4,
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [0],
            },
        },
        case3: {
            desc: 'sid!="lr"',
            input: {
                side: 'x', //A*B
                uplo: 'u',
                transA: 'n',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                lda: 6, //NBupper 4x4 of A is referenced
                ldb: 4,
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
            },
        },
        case4: {
            desc: 'uplo!="ul"',
            input: {
                side: 'l', //A*B
                uplo: 'x',
                transA: 'n',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                lda: 6, //NBupper 4x4 of A is referenced
                ldb: 4,
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
            },
        },
        case5: {
            desc: 'transA!="ntc"',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 'x',
                diag: 'u',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                lda: 6, //NBupper 4x4 of A is referenced
                ldb: 4,
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
            },
        },
        case6: {
            desc: 'diag!="un"',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 't',
                diag: 'x',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                lda: 6, //NBupper 4x4 of A is referenced
                ldb: 4,
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
            },
        },
        case7: {
            desc: 'm<0',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 'n',
                diag: 'n',
                m: -4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                lda: 6, //NBupper 4x4 of A is referenced
                ldb: 4,
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
            },
        },
        case8: {
            desc: 'n<0',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 'n',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: -6, // rows in B
                lda: 6, //NBupper 4x4 of A is referenced
                ldb: 4,
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
            },
        },
        case9: {
            desc: 'lda< max(1,nrowA)',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 'n',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                lda: 3, //NBupper 4x4 of A is referenced
                ldb: 4,
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
            },
        },
        case10: {
            desc: 'ldb< max(1,m)',
            input: {
                side: 'l', //A*B
                uplo: 'u',
                transA: 'n',
                diag: 'n',
                m: 4, // A = m*m marrix , lda >= m
                n: 6, // rows in B
                lda: 6, //NBupper 4x4 of A is referenced
                ldb: 3,
                alpha: complex(0.2, 0.8), // B = alpha * A * B
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
            },
        },
    },
};
