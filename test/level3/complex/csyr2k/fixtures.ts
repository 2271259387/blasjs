/* This is a conversion from BLAS to Typescript/Javascript
Copyright (C) 2018  Jacob K.F. Bogers  info@mail.jacob-bogers.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import { complex } from '../../../../src/lib/f_func';

import { matrix_mxn } from '../../../matrices';

export const fixture = {
    //ZSYR2K(UPLO,TRANS,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)
    csyr2k: {
        case0: {
            desc: '(trivial) alpha=(0,0), beta=(1,0)',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: complex(0, 0),
                beta: complex(1, 0),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: matrix_mxn(6, 6).toArr(),
            },
        },
        case1: {
            desc: 'trans="n", uplo="u", alpha=(0,0), beta=(0.5,0.5)',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: complex(0, 0),
                beta: complex(0.5, 0.5),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(0.13539692759513855, 1.1275573074817657),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.2378915399312973, -0.6906755119562149),
                    complex(0.26866142451763153, -0.5633818656206131),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.98985207080841064, -0.15780496597290039),
                    complex(-3.1066447496414185e-2, -0.25839513540267944),
                    complex(-0.28267623484134674, -1.6538873314857483e-2),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.24528039246797562, 0.19040291756391525),
                    complex(-0.74383988976478577, -0.49369856715202332),
                    complex(-0.42125558108091354, 0.19698769599199295),
                    complex(0.27500957995653152, 0.10238607972860336),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case2: {
            desc: 'trans="n", uplo="u", alpha=(0,0), beta=(0,0)',
            input: {
                uplo: 'l',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: complex(0, 0),
                beta: complex(0, 0),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(0.0, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case3: {
            desc: 'trans="n", uplo="u", alpha=(0.2,-0.6), beta=(0,0)',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: complex(0.2, -0.6),
                beta: complex(0, 0),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: (() => {
                    const m = matrix_mxn(6, 6); //
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //
                    m.r[0] = 0;
                    m.i && (m.i[0] = 0);
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(-0.83586151233225592, 0.56394888106102226),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(2.573043130593426, 0.16767797999470757),
                    complex(0.34240360482570337, -1.5283522018086906),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(2.28511282393593, 0.40582968598509878),
                    complex(-2.6511185560568755, -0.99018119069383548),
                    complex(0.32721593572802232, 1.4677243405786666),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(9.7309823990200384e-2, 1.9625297367448562),
                    complex(-3.3629068550787586, 2.2674848482313434),
                    complex(-1.0090793322692606, -0.9130850659423615),
                    complex(-3.8129725167517088, -10.883702715857607),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case4: {
            desc: 'trans="n", uplo="u", alpha=(0.2,-0.6), beta=(-0.4,0)',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: complex(0.2, -0.6),
                beta: complex(-0.4, 0),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: (() => {
                    const m = matrix_mxn(6, 6); //
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(-1.3410432138908113, 0.16708472319263468),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(2.9444699568831219, 0.34879157150347739),
                    complex(0.46029178302356649, -1.1955348807940278),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(2.7441756454890234, 7.3010839091507518e-2),
                    complex(-2.5353339211719126, -0.89924971417634481),
                    complex(0.44690198077396509, 1.3612693943817686),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-7.6963502619430857e-2, 1.9844807270335758),
                    complex(-2.867891464935731, 2.16742831769528),
                    complex(-0.91937217689695161, -1.1603823804565412),
                    complex(-3.9639307828752157, -10.814653314737519),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case5: {
            desc: 'trans="n", uplo="l", alpha=(0.2,-0.6), beta=(1,0)',
            input: {
                uplo: 'l',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: complex(0.2, -0.6),
                beta: complex(1, 0),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: (() => {
                    const m = matrix_mxn(6, 6); //
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(0.42709272274464838, 1.5561092609476495),
                    complex(2.2468097734023402, -0.26183511681467952),
                    complex(3.6149121184076707, 1.6441338241686925),
                    complex(1.3697391710284696, 1.6831834494943383),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(4.7683163722721744e-2, -2.3603954919469348),
                    complex(-2.6568857287250052, -2.1567517349366945),
                    complex(-0.95825354430300269, 1.2018942281904494),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(2.8000827571818113e-2, 1.7338617021051559),
                    complex(-1.4205901574264264, -1.2897877918296592),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(-3.4355768570665752, -11.056326216085536),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case6: {
            desc: 'trans="t", uplo="u", alpha=(0.2,-0.6), beta=(0,0)',
            input: {
                uplo: 'u',
                trans: 't',
                n: 4,
                k: 6,
                alpha: complex(0.2, -0.6),
                beta: complex(0, 0),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: (() => {
                    const m = matrix_mxn(6, 6); //
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(3.4468631471167859, 3.3391748650861475e-2),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-2.6337058928758674, -10.991585420020956),
                    complex(-9.3090745515998492, -4.1381001156460187),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(0.90654109547112283, 5.2716677184376106),
                    complex(3.5716115479891912, -6.6796892571654096),
                    complex(-0.78481224134314043, 6.4458952971264321),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(4.1797654156603841, -3.0256672163596514),
                    complex(-4.6784829266891925e-2, 1.2743966815221131),
                    complex(2.0382512309592462, -3.8321466782020641),
                    complex(-6.2165594209786832, 3.8498345412180353),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case7: {
            desc: 'trans="t", uplo="l", alpha=(0.2,-0.6), beta=(0.5,0.5)',
            input: {
                uplo: 'l',
                trans: 't',
                n: 4,
                k: 6,
                alpha: complex(0.2, -0.6),
                beta: complex(0.5, 0.5),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: (() => {
                    const m = matrix_mxn(6, 6); //
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                b: (() => {
                    const m = matrix_mxn(6, 6); //
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(),
                c: (() => {
                    const m = matrix_mxn(6, 6); //
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(3.5822600747119244, 1.160949056132627),
                    complex(-2.5820660230667167, -11.369458647021192),
                    complex(0.95228867361519631, 6.5557194347652779),
                    complex(4.955653232804778, -2.5291256864657763),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(-9.0404131270822177, -4.7014819812666317),
                    complex(4.1520132337765556, -7.2658581156209037),
                    complex(1.6883371361414334, 1.9439280268895445),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(-1.0674884761844872, 6.4293564238115746),
                    complex(2.0208471813243127, -4.2262534537242962),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(-5.9415498410221517, 3.9522206209466386),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
    },
    csyr2kErrors: {
        case0: {
            desc: 'a has no imaginary part',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: complex(0, 0),
                beta: complex(1, 0),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: [0],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case1: {
            desc: 'b has no imaginary part',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: complex(0, 0),
                beta: complex(1, 0),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: [complex(0, 0)],
                c: [complex(0, 0)],
                b: [0],
            },
        },
        case2: {
            desc: 'c has no imaginary part',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: 0,
                beta: 1,
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [0],
            },
        },
        case3: {
            desc: 'uplo!="ul"',
            input: {
                uplo: 'x',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: complex(0, 0),
                beta: complex(1, 0),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case4: {
            desc: 'trans!="nt"',
            input: {
                uplo: 'l',
                trans: 'x',
                n: 4,
                k: 6,
                alpha: complex(0, 0),
                beta: complex(1, 0),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case5: {
            desc: 'n<0',
            input: {
                uplo: 'l',
                trans: 't',
                n: -4,
                k: 6,
                alpha: complex(0, 0),
                beta: complex(1, 0),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case6: {
            desc: 'k<0',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4,
                k: -6,
                alpha: complex(0, 0),
                beta: complex(1, 0),
                lda: 6,
                ldb: 6,
                ldc: 6,
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case7: {
            desc: 'lda < max(1, nrowA=n if tr="n")',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: complex(0, 0),
                beta: complex(1, 0),
                lda: 3,
                ldb: 6,
                ldc: 6,
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case8: {
            desc: 'ldb < max(1, nrowA=n if tr="n")',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: complex(0, 0),
                beta: complex(1, 0),
                lda: 6,
                ldb: 3,
                ldc: 6,
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case9: {
            desc: 'ldc < max(1, n)',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4,
                k: 6,
                alpha: complex(0, 0),
                beta: complex(1, 0),
                lda: 6,
                ldb: 6,
                ldc: 3,
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
    },
};
