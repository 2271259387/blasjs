/* This is a conversion from BLAS to Typescript/Javascript
Copyright (C) 2018  Jacob K.F. Bogers  info@mail.jacob-bogers.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import { complex } from '../../../test-helpers';

import { matrix_mxn } from '../../../matrices';

export const fixture = {
    // SUBROUTINE ZHERK(UPLO,TRANS,N,K,ALPHA,A,LDA,BETA,C,LDC)
    cherk: {
        case0: {
            desc: '(trivial) alpha=(0,0), beta=1',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4, //A = m*m martix , lda >= m
                k: 6, //columns
                alpha: 0, //B = alpha * A * B
                beta: 1,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(1.2629542350769043, 0.9921603798866272),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(-0.29472044110298157, -0.83204329013824463),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(-0.29921510815620422, 0.26613736152648926),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(0.37739565968513489, -0.17262350022792816),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case1: {
            desc: '(near trivial), alpha=0, beta=0; uplo="u"',
            input: {
                cmdx: 'logDebug',
                uplo: 'u',
                trans: 'n',
                n: 4, // A = m*m martix , lda >= m
                k: 6, // columns
                alpha: 0, //(0.2, 0.8), //B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(0.0, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case2: {
            desc: '(near trivial), alpha=0, beta=0; uplo="l"',
            input: {
                cmdx: 'logDebug',
                uplo: 'l',
                trans: 'n',
                n: 4, // A = m*m martix , lda >= m
                k: 6, // columns
                alpha: 0, //(0.2, 0.8), //B = alpha * A * B
                beta: 0,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(0.0, 0.0),
                    complex(0.0, 0.0),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(0.0, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case3: {
            desc: '(near trivial), alpha=0, beta=0.5; uplo="l"',
            input: {
                cmdx: 'logDebug',
                uplo: 'l',
                trans: 'n',
                n: 4, // A = m*m martix , lda >= m
                k: 6, // columns
                alpha: 0, //(0.2, 0.8), //B = alpha * A * B
                beta: 0.5,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(0.63147711753845215, 0.0),
                    complex(-0.16311667859554291, -0.2147565484046936),
                    complex(0.66489964723587036, 0.61915206909179688),
                    complex(0.63621467351913452, -0.1396731436252594),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(-0.14736022055149078, 0.0),
                    complex(-2.8835863340646029e-3, -0.58328527212142944),
                    complex(1.2023266553878784, -0.53279531002044678),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(-0.14960755407810211, 0.0),
                    complex(-0.20575541257858276, -0.18835136294364929),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(0.18869782984256744, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case4: {
            desc: 'trans="n", alpha=0.2, beta=0.5, uplo="u"',
            input: {
                cmdx: 'logDebug',
                uplo: 'u',
                trans: 'n',
                n: 4, // A = m*m martix , lda >= m
                k: 6, // columns
                alpha: 0.2,
                beta: 0.5,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(1.7290593975566546, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.50142463497895062, -0.2547963519183889),
                    complex(0.54903737895204929, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-0.51074128039019118, 0.36215083388446062),
                    complex(0.12492495059790593, 4.3510452327288618e-2),
                    complex(1.3641416174735665, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-5.4100663269638076e-2, -0.44984149203585322),
                    complex(-0.69734669515316827, -0.51962226569284409),
                    complex(0.30051980781257026, 0.25928534634610489),
                    complex(2.1917644304238264, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case5: {
            desc: 'trans="n", alpha=0.2, beta=0.5, uplo="u"',
            input: {
                cmdx: 'logDebug',
                uplo: 'u',
                trans: 'n',
                n: 4, //A = m*m martix, lda >= m
                k: 6, //columns
                alpha: 0.2,
                beta: 0,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(1.0975822800182025, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-3.7141109035194485e-2, -2.8404365905930096e-2),
                    complex(0.69639759950354008, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(6.3087238000464368e-2, -5.3872718533294506e-2),
                    complex(0.26965574204745274, 0.15717479628042125),
                    complex(1.5137491715516687, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-0.27194231828558352, -0.42240275458382304),
                    complex(-7.8577466694763745e-2, -0.64469292699922542),
                    complex(0.41265375035703061, -4.983629219034845e-2),
                    complex(2.003066600581259, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case6: {
            desc: 'trans="n", alpha=0.2, beta=1, uplo="u"',
            input: {
                cmdx: 'logDebug',
                uplo: 'u',
                trans: 'n',
                n: 4, //A = m*m martix, lda >= m
                k: 6, //columns
                alpha: 0.2,
                beta: 1,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(2.3605365150951068, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.9657081609227065, -0.4811883379308477),
                    complex(0.40167715840055845, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.0845697987808469, 0.77817438630221569),
                    complex(-1.9805840851640832e-2, -7.0153891625843956e-2),
                    complex(1.2145340633954644, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.16374099174630735, -0.4772802294878834),
                    complex(-1.3161159236115731, -0.39455160438646292),
                    complex(0.18838586526810999, 0.56840698488255814),
                    complex(2.3804622602663938, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case7: {
            desc: 'trans="n", alpha=0.2, beta=1, uplo="l"',
            input: {
                cmdx: 'logDebug',
                uplo: 'l',
                trans: 'n',
                n: 4, //A = m*m martix, lda >= m
                k: 6, //columns
                alpha: 0.2,
                beta: 1,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(2.3605365150951068, 0.0),
                    complex(-0.36337446622628033, -0.40110873090345711),
                    complex(1.3928865324722048, 1.2921768567168883),
                    complex(1.0004870287526855, 0.14305646733330429),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(0.40167715840055845, 0.0),
                    complex(0.26388856937932353, -1.3237453405232802),
                    complex(2.326075844080993, -0.42089769304166819),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(1.2145340633954644, 0.0),
                    complex(1.1429251998650788e-3, -0.32686643369695023),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(2.3804622602663938, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case8: {
            desc: 'trans="c", alpha=0.2, beta=1, uplo="u"',
            input: {
                cmdx: 'logDebug',
                uplo: 'u',
                trans: 'c',
                n: 4, //A = m*m martix, lda >= m
                k: 6, //columns
                alpha: 0.2,
                beta: 0,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(2.2475633992730493, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.36106021899967, -1.0814334285577285),
                    complex(3.025930129624856, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(1.005828592149671, 0.47476237523631842),
                    complex(-0.75316556491383857, 0.15292505454474753),
                    complex(2.0136910810504953, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-0.90180653469386363, 0.14218481502237462),
                    complex(0.3247890368651864, -0.50868035075148443),
                    complex(-1.0421890586849125, 6.2968630915559765e-2),
                    complex(1.9197208584549985, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case9: {
            desc: 'trans="c", alpha=0.2, beta=0.2, uplo="u"',
            input: {
                cmdx: 'logDebug',
                uplo: 'u',
                trans: 'c',
                n: 4, //A = m*m martix, lda >= m
                k: 6, //columns
                alpha: 0.2,
                beta: 0.2,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(2.5001542500523271, 0.0),
                    complex(-0.32623335719108582, -0.42951309680938721),
                    complex(1.3297992944717407, 1.2383041381835938),
                    complex(1.272429347038269, -0.2793462872505188),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(0.1753468058548221, -1.1719902243121134),
                    complex(2.9669860405259243, 0.0),
                    complex(-5.7671726681292057e-3, -1.1665705442428589),
                    complex(2.4046533107757568, -1.0655906200408936),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(0.77629718137312431, 0.64117179868311402),
                    complex(-0.81105788235632004, 0.10745931628600219),
                    complex(1.953848058527524, 0.0),
                    complex(-0.41151082515716553, -0.37670272588729858),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(-0.81466987138904801, 0.13120931987801493),
                    complex(7.7281341793672576e-2, -0.45865208548345271),
                    complex(-1.087042636371067, 0.18661728817264961),
                    complex(1.9951999915167522, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case10: {
            desc: 'trans="c", alpha=0.2, beta=0, uplo="l"',
            input: {
                cmdx: 'logDebug',
                uplo: 'l',
                trans: 'c',
                n: 4, //A = m*m martix, lda >= m
                k: 6, //g
                alpha: 0.2,
                beta: 0,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(2.2475633992730493, 0.0),
                    complex(0.36106021899967, 1.0814334285577285),
                    complex(1.005828592149671, -0.47476237523631842),
                    complex(-0.90180653469386363, -0.14218481502237462),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(3.025930129624856, 0.0),
                    complex(-0.75316556491383857, -0.15292505454474753),
                    complex(0.3247890368651864, 0.50868035075148443),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(2.0136910810504953, 0.0),
                    complex(-1.0421890586849125, -6.2968630915559765e-2),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(1.9197208584549985, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
        case11: {
            desc: 'trans="c", alpha=0.2, beta=0.2, uplo="l"',
            input: {
                cmdx: 'logDebug',
                uplo: 'l',
                trans: 'c',
                n: 4, //A = m*m martix, lda >= m
                k: 6, //g
                alpha: 0.2,
                beta: 0.2,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    m.r[0] = 0;
                    m.i[0] = 0;
                    return m;
                })(), // only uses 4x4!!
                c: (() => {
                    const m = matrix_mxn(6, 6); //m*
                    //m.r[0] = 0;
                    //m.i[0] = 0;
                    return m;
                })(),
            },
            expect: {
                c: [
                    complex(2.5001542500523271, 0.0),
                    complex(0.29581354658920167, 0.99553080791580228),
                    complex(1.2717884550071299, -0.22710154390916576),
                    complex(-0.64732066149407486, -0.19805407330499519),
                    complex(0.41464143991470337, 1.7579030990600586),
                    complex(-1.5399500131607056, 0.56074607372283936),
                    complex(-0.92856705188751221, -0.4527839720249176),
                    complex(2.9669860405259243, 0.0),
                    complex(-0.75431899946465197, -0.38623916686997045),
                    complex(0.80571970618676314, 0.2955622235675982),
                    complex(0.76359343528747559, -1.5637820959091187),
                    complex(-0.79900926351547241, 1.1565370559692383),
                    complex(-1.147657036781311, 0.83204710483551025),
                    complex(-0.28946158289909363, -0.22732868790626526),
                    complex(1.953848058527524, 0.0),
                    complex(-1.1244912249427435, -0.13830917721568109),
                    complex(0.25222346186637878, 2.4413645267486572),
                    complex(-0.89192110300064087, -0.79533910751342773),
                    complex(0.43568331003189087, -5.4877474904060364e-2),
                    complex(-1.2375384569168091, 0.25014132261276245),
                    complex(-0.22426788508892059, 0.61824327707290649),
                    complex(1.9951999915167522, 0.0),
                    complex(0.13333636522293091, -2.223900318145752),
                    complex(0.80418950319290161, -1.2636144161224365),
                    complex(-5.7106774300336838e-2, 0.35872888565063477),
                    complex(0.50360798835754395, -1.1045478284358978e-2),
                    complex(1.0857694149017334, -0.94064915180206299),
                    complex(-0.69095385074615479, -0.11582532525062561),
                    complex(-1.2845993041992188, -0.81496870517730713),
                    complex(4.6726170927286148e-2, 0.24226348102092743),
                    complex(-0.23570655286312103, -1.4250984191894531),
                    complex(-0.54288828372955322, 0.36594113707542419),
                    complex(-0.43331032991409302, 0.24841265380382538),
                    complex(-0.64947164058685303, 6.5288178622722626e-2),
                    complex(0.72675073146820068, 1.9156390801072121e-2),
                    complex(1.151911735534668, 0.25733837485313416),
                ],
            },
        },
    },
    cherkErrors: {
        case0: {
            desc: 'a has no imaginary part',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4, //A = m*m martix , lda >= m
                k: 6, //columns
                alpha: 0.1, //(0.2, 0.8), //B = alpha * A * B
                beta: 0.3,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                //dummies, its not a data test
                a: [0],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case1: {
            desc: 'c has no imaginary part',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4, //A = m*m martix , lda >= m
                k: 6, //columns
                alpha: 0.1, //(0.2, 0.8), //B = alpha * A * B
                beta: 0.3,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [0],
            },
        },
        case2: {
            desc: 'uplo!="ul"',
            input: {
                uplo: 'x',
                trans: 'n',
                n: 4, //A = m*m martix , lda >= m
                k: 6, //columns
                alpha: 0.1, //(0.2, 0.8), //B = alpha * A * B
                beta: 0.3,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case3: {
            desc: 'trans!="cn"',
            input: {
                uplo: 'u',
                trans: 'x',
                n: 4, //A = m*m martix , lda >= m
                k: 6, //columns
                alpha: 0.1, //(0.2, 0.8), //B = alpha * A * B
                beta: 0.3,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case4: {
            desc: 'n<0',
            input: {
                uplo: 'u',
                trans: 'n',
                n: -4, //A = m*m martix , lda >= m
                k: 6, //columns
                alpha: 0.1, //(0.2, 0.8), //B = alpha * A * B
                beta: 0.3,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case5: {
            desc: 'k<0',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4, //A = m*m martix , lda >= m
                k: -6, //columns
                alpha: 0.1, //(0.2, 0.8), //B = alpha * A * B
                beta: 0.3,
                lda: 6, //physical storage
                ldc: 6, //physical storage
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case6: {
            desc: 'lda < max(1, nrowA)',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 4,
                k: 6, // if trans==N, then  A=(nxk)
                alpha: 0.1, //(0.2, 0.8), //B = alpha * A * B
                beta: 0.3,
                lda: 3, //when trans="n" then lda must be >=n
                ldc: 6, //physical storage
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
        case8: {
            desc: 'ldc < max(1, n)',
            input: {
                uplo: 'u',
                trans: 'n',
                n: 5, //A = m*m martix , lda >= m
                k: 6, //columns
                alpha: 0.1, //(0.2, 0.8), //B = alpha * A * B
                beta: 0.3,
                lda: 6, //physical storage
                ldc: 4, //physical storage
                //dummies, its not a data test
                //dummies, its not a data test
                a: [complex(0, 0)],
                b: [complex(0, 0)],
                c: [complex(0, 0)],
            },
        },
    },
};
